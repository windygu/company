/**
 * 作者： 	cuilei
 * 类说明：	post访问网络
 */
package com.astrolink.util.tools;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.Cookie;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.SimpleHttpConnectionManager;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.commons.httpclient.protocol.Protocol;
import org.apache.log4j.Logger;

import com.astrolink.util.tools.business.SSL.SSLProtocolSocketFactory;

public class PostNetWork_singleton {
	private Logger logger = Logger.getLogger(PostNetWork_singleton.class);
	private PostMethod post = null;
	private NameValuePair[] postData = null;
	private HttpClient httpclient = null;
	private HttpConnectionManagerParams managerParams = null;
	private Class ssl=null;
	private String infoInputStream = "";
	private int connectionTimeout = 30000;
	private int soTimeout = 30000;
	private int netState = -1;

    private String proxyHost;
    private int proxyPort;
    private String proxyUser="";
    private String proxyPwd="";
    private  byte[] infoByte=null;
   
    
    public PostNetWork_singleton(String url){
    	  post = new PostMethod(url);
    }
    
	/**
	 * 访问网络
	 */
	public void executeMethod() {
		// 设置post请求参数
		if (this.postData != null) {
			this.post.setRequestBody(this.postData);
		}
		// 设置发送的信息数据流
		if (!infoInputStream.equals("") || infoByte!=null) {
			if(!infoInputStream.equals("")){
				infoByte = infoInputStream.getBytes();
			}
			ByteArrayInputStream bs = new ByteArrayInputStream(infoByte, 0, infoByte.length);
			this.post.setRequestEntity(new InputStreamRequestEntity(bs, infoByte.length));
		}
		
		//https证书
		if(ssl!=null){
			SSLProtocolSocketFactory sslp=new SSLProtocolSocketFactory();
			sslp.setTat(ssl);
			Protocol myhttps = new Protocol("https",sslp, 443);   
			Protocol.registerProtocol("https", myhttps);   
		}
		
		this.managerParams = httpclient.getHttpConnectionManager().getParams();
		// 设置参数字符编码
		this.post.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "utf-8");
		// 设置连接超时时间(单位毫秒)
		this.managerParams.setConnectionTimeout(this.connectionTimeout);
		// 设置读数据超时时间(单位毫秒)
		this.managerParams.setSoTimeout(this.soTimeout);
		// 开始访问网路
		try {
			this.netState = this.httpclient.executeMethod(this.post);
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
	}

	/**
	 * 使用代理访问网络
	 */
	public void executeMethod(boolean isProxy) {
		if (isProxy) // 启用代理
			setProxy(this.httpclient);
		// 设置post请求参数
		if (this.postData != null) {
			this.post.setRequestBody(this.postData);
		}
		// 设置发送的信息数据流
		if (!infoInputStream.equals("")) {
			byte[] b = infoInputStream.getBytes();
			ByteArrayInputStream bs = new ByteArrayInputStream(b, 0, b.length);
			this.post.setRequestEntity(new InputStreamRequestEntity(bs, b.length));
		}
		
		//https证书
		if(ssl!=null){
			SSLProtocolSocketFactory sslp=new SSLProtocolSocketFactory();
			sslp.setTat(ssl);
			Protocol myhttps = new Protocol("https",sslp, 443);   
			Protocol.registerProtocol("https", myhttps);   
		}
		
		this.managerParams = httpclient.getHttpConnectionManager().getParams();
		// 设置参数字符编码
		this.post.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "utf-8");
		// 设置连接超时时间(单位毫秒)
		this.managerParams.setConnectionTimeout(this.connectionTimeout);
		// 设置读数据超时时间(单位毫秒)
		this.managerParams.setSoTimeout(this.soTimeout);
		// 开始访问网路
		try {
			this.netState = this.httpclient.executeMethod(this.post);
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
	}

	// 设置代理
	private void setProxy(HttpClient client) {
		client.getHostConfiguration().setProxy(this.proxyHost,this.proxyPort);
		client.getState().setProxyCredentials(AuthScope.ANY, new UsernamePasswordCredentials(this.proxyUser,this.proxyPwd));
	}

	/**
	 * 返回信息数据流
	 * 
	 * @return
	 */
	public InputStream getInputStream() {
		try {
			byte[] data = this.post.getResponseBody();
			return new ByteArrayInputStream(data);
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
		return null;
	}
	
	public String getCookie(){
		StringBuffer cookieStr=new StringBuffer();
		Cookie[] cookies = this.httpclient.getState().getCookies();  
        for (Cookie c : cookies) {  
        	cookieStr.append(c.toString() + ";");  
        }  
        return cookieStr.toString();
	}

	/**
	 * 返回信息
	 * 
	 * @return
	 */
	public String getString() {
		try {
			InputStream inputStream = this.post.getResponseBodyAsStream();
			BufferedReader br=new BufferedReader(new InputStreamReader(inputStream));
			StringBuffer stringBuffer = new StringBuffer();
			String str = "";
			while ((str = br.readLine()) != null) {
				stringBuffer.append(str);
			}
			return stringBuffer.toString();
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
		return null;
	}
	
	/**
	 * 返回信息
	 * 
	 * @return
	 */
	public String getString(String charsetName) {
		if(!String.valueOf(charsetName).equals("") && !String.valueOf(charsetName).equals("null")){
			try {
				InputStream inputStream = this.post.getResponseBodyAsStream();
				BufferedReader br=new BufferedReader(new InputStreamReader(inputStream,charsetName));
				
				StringBuffer stringBuffer = new StringBuffer();
				String str = "";
				while ((str = br.readLine()) != null) {
					stringBuffer.append(str);
				}
				return stringBuffer.toString();
			} catch (Exception e) {
				this.logger.error(ExceptionTool.getErrorInfo(e));
			}
		}else{
			return this.getString();
		}
		return null;
	}
	
	/**
	 * 返回信息
	 * 
	 * @return
	 */
	public String getHtml(String charsetName) {
		if(!String.valueOf(charsetName).equals("") && !String.valueOf(charsetName).equals("null")){
			try {
				InputStream inputStream = this.post.getResponseBodyAsStream();
				BufferedReader br=new BufferedReader(new InputStreamReader(inputStream,charsetName));
				
				StringBuffer stringBuffer = new StringBuffer();
				String str = "";
				while ((str = br.readLine()) != null) {
					stringBuffer.append(str+"\r\n");
				}
				return stringBuffer.toString();
			} catch (Exception e) {
				this.logger.error(ExceptionTool.getErrorInfo(e));
			}
		}else{
			return this.getString();
		}
		return null;
	}
	
	/**
	 * 返回信息
	 * 
	 * @return
	 */
	public String getString(String charsetName,String zipName) {
		if(!String.valueOf(charsetName).equals("") && !String.valueOf(charsetName).equals("null")){
			try {
				InputStream inputStream = this.post.getResponseBodyAsStream();
				BufferedReader br=null;
				if(zipName.equals("GZIP")){
					GZIPInputStream  gzin = new GZIPInputStream(inputStream);  
					br=new BufferedReader(new InputStreamReader(gzin,charsetName));
				}else{
					br=new BufferedReader(new InputStreamReader(inputStream,charsetName));
				}
				StringBuffer stringBuffer = new StringBuffer();
				String str = "";
				while ((str = br.readLine()) != null) {
					stringBuffer.append(str);
				}
				return stringBuffer.toString();
			} catch (Exception e) {
				this.logger.error(ExceptionTool.getErrorInfo(e));
			}
		}else{
			return this.getString();
		}
		return null;
	}

	/**
	 * 关闭链接
	 */
	public void closeConn() {
		try {
			this.post.releaseConnection();
			((SimpleHttpConnectionManager) this.httpclient.getHttpConnectionManager()).shutdown();
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
	}

	/**
	 * 返回联网状态吗
	 * 
	 * @return
	 */
	public int getNetState() {
		return this.netState;
	}

	/**
	 * 获取org.apache.commons.httpclient.methods.PostMethod对象
	 * 
	 * @return org.apache.commons.httpclient.methods.PostMethod
	 */
	public PostMethod getPostMethod() {
		return this.post;
	}

	/**
	 * 获得请求信息
	 * @return
	 */
	/*public String getRequestInfo() {
		HashMap hashMap = new HashMap();
		try {
			// 获取访问url
			hashMap.put("Url", this.post.getURI().toString());

			// 获取请求头信息
			Header[] headers = this.post.getRequestHeaders();
			HashMap headerHm = new HashMap();
			for (Header header : headers) {
				headerHm.put(header.getName(), header.getValue());
			}
			hashMap.put("Headers", headerHm);

			// 获取参数信息
			NameValuePair[] parameters = this.post.getParameters();
			HashMap paramHm = new HashMap();
			for (NameValuePair parameter : parameters) {
				paramHm.put(parameter.getName(), parameter.getValue());
			}
			hashMap.put("Parameters", paramHm);
		} catch (Exception e) {
			this.logger.error(ExceptionTool.getErrorInfo(e));
		}
		return JsonTools.object2JSON(hashMap);
	}*/

	public String getInfoInputStream() {
		return infoInputStream;
	}

	public void setInfoInputStream(String infoInputStream) {
		this.infoInputStream = String.valueOf(infoInputStream);
	}

	public int getConnectionTimeout() {
		return connectionTimeout;
	}

	public void setConnectionTimeout(int connectionTimeout) {
		this.connectionTimeout = connectionTimeout;
	}
	
	public int getSoTimeout() {
		return soTimeout;
	}

	public void setSoTimeout(int soTimeout) {
		this.soTimeout = soTimeout;
	}

	public NameValuePair[] getPostData() {
		return postData;
	}

	public void setPostData(NameValuePair[] postData) {
		this.postData = postData;

	}

	public HttpClient getHttpclient() {
		return httpclient;
	}
	
	public void setHttpclient(HttpClient httpclient) {
		this.httpclient = httpclient;
	}


	public String getProxyHost() {
		return proxyHost;
	}

	public void setProxyHost(String proxyHost) {
		this.proxyHost = proxyHost;
	}

	public int getProxyPort() {
		return proxyPort;
	}

	public void setProxyPort(int proxyPort) {
		this.proxyPort = proxyPort;
	}

	public String getProxyUser() {
		return proxyUser;
	}

	public void setProxyUser(String proxyUser) {
		this.proxyUser = proxyUser;
	}

	public String getProxyPwd() {
		return proxyPwd;
	}

	public void setProxyPwd(String proxyPwd) {
		this.proxyPwd = proxyPwd;
	}

	public byte[] getInfoByte() {
		return infoByte;
	}

	public void setInfoByte(byte[] infoByte) {
		this.infoByte = infoByte;
	}

	public void setSsl(Class ssl) {
		this.ssl = ssl;
	}
	
	
}
