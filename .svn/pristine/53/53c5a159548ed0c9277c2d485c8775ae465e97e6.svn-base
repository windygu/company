package com.astrolink.util.game2.migu20;

import java.util.Map;

import net.sf.json.JSONObject;

import com.astrolink.dao.Game2ExecLinstenerThreadDao;
import com.astrolink.util.game2.utils.Common;

public class manga {
	// sdk�汾���
	public String apiVersion = "20";
	public String SDKVersion = "12002005";
	public String SEC_VERSION = "A";
	public String nRQd_Lx = "202";
	public String EN = "E";
	public String miguEDVersion = "miguED.20.02";
	public String soVersion = "03080101";
	public String migusdkversion = "20150";
	public String MiguPay_FileSHA1 = "tpvnW8NXjblJ8vw3wRtGJuZDD+o=";

	// �豸��Ϣ���
	public String isRoot = "1";

	public String imei = "";
	public String encodecid = "";
	public String websessionid = "";
	public String Serial = "0000000000000000";
	public String linux_version = "3.4.5";
	public String Hardware = "HS-U978";
	public String local_ip = "";

	public String message;
	public String phoneNumber = "";
	public String imsi = "";

	public String apkstatus = "";
	public int netcount = 1;
	public int paycount = 0;
	public String startcount = "0002";
	public String startSecond = "";
	public String webSecond = "";

	// �Ʒ�
	// ����
	public String PayCode = "";
	public String AppId = "";
	// �乾
	public String Ctype = "3"; // �����̶���4
	public String cpId = "";
	public String contentId = "";
	public String ChannelCode = "";
	public String productId = "";
	public String Fee = "";
	public String ItemId = "";
	public String mg20irid;

	public String channelId = "";

	public String cpparam = "";
	public long currentmillis;

	// -----------------------------------һ������Ϸ��ز���---------------------------------------------
	public String gameContentId;
	public String gameChannelId;
	public String gameCpId;
	public String gameSDKVersion = "26002";
	public String gameType;
	public String gameSDKSessionId;
	public String gameVersionCode = "26002";
	public MiguGameLogEvent event;
	public String packageName;
	public String itemName;
	public String chargePolicy;
	public String gameName;

	// -----------------------�豸��Ϣ-------------------------
	public String RELEASE = "4.2.2";
	public String screen = "540*960";
	public String BRAND = "Hisense";
	public String MODEL = "HS-U978";
	public String MacAddr = "34:0a:ff:73:82:8e";
	public String Location = "";
	public String NetworkType = "0";
	public String versionName;
	public String versionCode;
	
	public String sms;
	public String resultCode="-1";

	public void main(String[] args) {

		xmxx();
		gameXmxx();
		runGameLog();
		initDeviceInfo();
		run();

		String smsTimeStampByMillis = base
				.getSmsTimeStampByMillis(1473319219567l);
		System.out.println(smsTimeStampByMillis);
		// String data = Url
		// .decode("00022333+eF/MMcVvQmrlzZFCpPkdzLREzpNLyhTNYoEqzeGNUTytxxJBznJlzr9XevbXtdKEhSFqArhNT1Gv++Qonkme7SKwzuKqUSfZrPUDyohb0qLSzf/4/O9XmD+dt1lpvmbVF9NLCCeQyhVHooorHvCOr72tf93R/uhNSL/H7F8YyeGAqPgu2hU7iXCe4ruB/VN64vZe38XC/YfPrXk9v7rqhMFVnkdtMvCKIpHqOC9di0D7MHzLp22anLsUe5XdbUN5mnxc+9LMGLT9Yq0GXX4Bn8f9vrihaE/zSro/F/0RA1i30xSgki9xPLXYDuEXEltJ5wX6cq2cOEZFCeKgC4UZAHjk8p+++t+EdmWHxCLouNaOfHbtuislhdifoL0qaBlcgjueUyelz/QpFJtyHjpPznMttH4C66P9M53G1Zscd0LAgkPP2gD1+C21vs3z7NuJt4izPMKECkWxYra/aMFKBtZHkaJqgrVKGKBVl+fOYZg7OUmCwWmkvYHIi3EEIw6JOqCBDrr7rF9VQwAxouggg==")
		// .replace("", "");
		// String data =
		// "00022333+eF/MMcVvQmrlzZFCpPkdzLREzpNLyhTNYoEqzeGNUTytxxJBznJlzr9XevbXtdKEhSFqArhNT1Gv++Qonkme7SKwzuKqUSfZrPUDyohb0qLSzf/4/O9XmD+dt1lpvmbVF9NLCCeQyhVHooorHvCOr72tf93R/uhNSL/H7F8YyeGAqPgu2hU7iXCe4ruB/VN64vZe38XC/YfPrXk9v7rqhMFVnkdtMvCKIpHqOC9di0D7MHzLp22anLsUe5XdbUN5mnxc+9LMGLT9Yq0GXX4Bn8f9vrihaE/zSro/F/0RA1i30xSgki9xPLXYDuEXEltJ5wX6cq2cOEZFCeKgC4UZAHjk8p+++t+EdmWHxCLouNaOfHbtuislhdifoL0qaBlcgjueUyelz/QpFJtyHjpPznMttH4C66P9M53G1Zscd0LAgkPP2gD1+C21vs3z7NuJt4izPMKECkWxYra/aMFKBtZHkaJqgrVKGKBVl+fOYZg7OUmCwWmkvYHIi3EEIw6JOqCBDrr7rF9VQwAxouggg==";
		// String[] str = algorithm.DecryptNet1(mg20irid, data);
		// String[] str = algorithm.DecryptNet2(mg20irid, data, "", "", "");
		// String[] str = algorithm.DecryptNet2(mg20irid, data,
		// "1a95343ada424daf9063ca969b078613",
		// "354b49ffcd1d45c69d039773c49d5275", "12002005");
		// String ss = algorithm.generateNetSignatureAndEncrypt(mg20irid,
		// str[0].substring(0, str[0].lastIndexOf("|") + 1), str[1], "",
		// "", "");
		// System.out.println(Url.encode(ss));
		// algorithm
		// .decryptSms(
		// mg20irid,
		// "000144o1z622.)z227h0\\33\"60b0'y44k9~769pD3nGY/qsaq'r6fVZ~uCnQA=0bda98_8afTNF1e4201A090[E.105_^k{-0bs000?0MIJlZfOeVS\\)3G3mbZrPJK53b&SU8=");
	}

	public void initDeviceInfo() {
		RELEASE = "4.2.2";
		screen = "540*960";
		BRAND = "Hisense";
		MODEL = "HS-U978";
		MacAddr = "34:0a:ff:73:82:8e";
		Location = "";
		NetworkType = "0";

		versionName = "1.2.0";
		versionCode = "120";
	}

	public void xmxx() {
		apkstatus = "00";

		imei = "862230024780033";
		// imsi = "460001033136031"; //����
		imsi = "460006103857827";

		local_ip = "192.168.254.181";

		encodecid = "pD3IGY/qsaYZt6fVxRuCWQA=";
		MiguPay_FileSHA1 = "BoQY/SeZTgUK6SQgoApRmpW/y/8=";

		AppId = "";
		productId = "";
		contentId = "006094953000";
		mg20irid = "00022333";
		cpId = "799087";

		ChannelCode = "40323634624";
		channelId = "40323634624";
		PayCode = "006094953007";
		Fee = "1";
		ItemId = "006094953007";
	}

	public void gameXmxx() {
		gameContentId = "608716048443";
		gameChannelId = "42694001";
		gameCpId = "799087";
		gameType = "6";
		gameSDKSessionId = Common.getSession(12);
		packageName = "com.zplay.migupopstar";
		itemName = "10������";
		chargePolicy = "1";
		gameName = "��������2016";
	}

	public void lljsx() {
		apkstatus = "00";

		imei = "862230024780033";
		// imsi = "460001033136031"; //����
		imsi = "460006103857827";

		local_ip = "192.168.254.181";

		encodecid = "pD3IGY/qsaYZt6fVxRuCWQA=";
		MiguPay_FileSHA1 = "UPgDerMhpyNXtVO1JjINw5HVOC0=";

		AppId = "";
		productId = "";
		contentId = "006050306000";
		mg20irid = "00014441";
		cpId = "701186";

		ChannelCode = "40054926876";
		channelId = "40054926876";
		PayCode = "006050306003";
		Fee = "100";
		ItemId = "006050306003";
	}

	public void toJson() {
		JSONObject json = new JSONObject();
		json.put("apiVersion", apiVersion);
		json.put("SDKVersion", SDKVersion);
		json.put("SEC_VERSION", SEC_VERSION);
		json.put("nRQd_Lx", nRQd_Lx);
		json.put("EN", EN);
		json.put("miguEDVersion", miguEDVersion);
		json.put("soVersion", soVersion);
		json.put("migusdkversion", migusdkversion);
		json.put("Serial", Serial);
		json.put("encodecid", encodecid);
		json.put("MiguPay_FileSHA1", MiguPay_FileSHA1);
		json.put("Location", "");
		json.put("NetworkType", "0");
		json.put("linux_version", linux_version);
		json.put("isRoot", isRoot);
		json.put("Ctype", Ctype);
		// �����඼�ǿ���д����
		json.put("mg20irid", mg20irid);// �����apk�� assets/mg20irid.dat�ļ���
		json.put("apkstatus", apkstatus);// ץ�� ��Ĭ��д01 �����ͨ ��ץ��
		json.put("ChannelCode", ChannelCode);// 9λ //��assets/CHANNEL/channel.xml
												// ���������� 0000 �������channelId
												// һ����ǿ��ַ�
		json.put("channelId", channelId);// 8λ
		json.put("contentId", contentId);
		json.put("AppId", AppId);// �����Ҫץ�� ��һ��Ĭ�Ϻ�productһ��
		System.out.println(json.toString());

	}

	public void runGameLog() {
		event = new MiguGameLogEvent();

	}

	public String run() {

//		String rand16Num = Common.getSession(16);
		String sSdkSessionid = Game2ExecLinstenerThreadDao.supportAttrInfo.optString("sSdkSessionid");//Common.getSession(16);
		String localsessionid = Game2ExecLinstenerThreadDao.supportAttrInfo.optString("localsessionid");//Common.getSession(12);

		event.init(gameSDKSessionId, gameSDKVersion, gameCpId, gameContentId,
				gameChannelId, imei, imsi, MacAddr, BRAND, MODEL);

		long startmillis = Game2ExecLinstenerThreadDao.supportAttrInfo.optLong("startmillis");// System.currentTimeMillis();

		Map<String, String> headers = base.initHeaders(apiVersion, SDKVersion,
				SEC_VERSION, nRQd_Lx, EN, imsi, imei);
		String verification_checkSdkUpdate = base
				.post_verification_checkSdkUpdate(headers, SDKVersion,
						miguEDVersion, soVersion);

		String BaseClientHeader = base.generate_BaseClientHeader(sSdkSessionid,
				"0", imei, imsi, RELEASE, screen, BRAND, MODEL, SDKVersion,
				nRQd_Lx, MacAddr, Location, local_ip, NetworkType);
		System.out.println(BaseClientHeader);

		local_ip = base.formateLocalip(local_ip);

		currentmillis = Game2ExecLinstenerThreadDao.supportAttrInfo.optLong("reportStrCurrentmillis");//startmillis + base.getRandom(5000);
		long webmillis = currentmillis;
		startSecond = (currentmillis - startmillis) / 1000 + "";
		webSecond = (currentmillis - webmillis) / 1000 + "";

		String ReportStr = base
				.generate_ReportStr(
						"",
						imei,
						imsi,
						encodecid,
						"",
						base.getSmsTimeStampByMillis(currentmillis),
						apkstatus,
						netcount,
						paycount,
						startcount,
						startSecond,
						webSecond,
						soVersion,
						migusdkversion,
						"",
						"",
						"",
						"",
						"",
						MiguPay_FileSHA1,
						Serial,
						linux_version,
						Hardware,
						local_ip,
						"cn.cmgame.billing.api.GameOpenActivity.onCreate(GameOpenActivity.java:31)|4",
						isRoot, localsessionid);
		netcount++;
		System.out.println("ReportStr:\t" + ReportStr);

		String tl_initcttl_rsp = base.post_tl_initcttl(headers,
				BaseClientHeader, mg20irid, ReportStr,
				base.getLogTimeStampByMillis(currentmillis));
		resultCode=base.getContextByTag(tl_initcttl_rsp, "ResultCode");
		if (!resultCode.equals("0")) {
			System.out.println("tl_initcttl failed!");
			return resultCode;
		}
		String tl_initcttl_enc = base.getContextByTag(tl_initcttl_rsp, "Enc");

		String[] tl_initcttl_enc_dec = algorithm.DecryptNet1(mg20irid,
				tl_initcttl_enc);
		if (tl_initcttl_enc_dec == null) {
			return resultCode;
		}
		// -----------------------------------------gameLog--------------------------------------------

		event.queryConfiguration(gameSDKVersion, imei, imsi, gameSDKSessionId,
				gameContentId, gameChannelId, gameType);
		event.post_normandie_querySafechargeRule(gameSDKVersion, imei, imsi,
				gameSDKSessionId, gameContentId, gameChannelId, gameType);
		event.post_normandie_QueryConfigPolicy(gameSDKVersion, imei, imsi,
				gameSDKSessionId, gameContentId, gameChannelId, gameType);
		event.queryThirdPayInfo(gameSDKVersion, imei, imsi, gameSDKSessionId,
				gameContentId, gameChannelId);
		event.queryAll(gameSDKVersion, imei, imsi, gameSDKSessionId,
				gameContentId, gameChannelId);
		event.post_egsb_verification_checkSdkUpdate(gameSDKVersion, imei, imsi,
				gameSDKSessionId, gameCpId, gameContentId, gameChannelId,
				MODEL, "1", gameVersionCode);
		event.post_egsb_gshare_switches(gameSDKVersion, imei, imsi,
				gameSDKSessionId, contentId, channelId, MODEL);
		event.gameLogEvent1(currentmillis, webSecond);

		currentmillis = Game2ExecLinstenerThreadDao.supportAttrInfo.optLong("smscurrentmillis");//currentmillis + 1000 + base.getRandom(1000);

		webSecond = (currentmillis - webmillis) / 1000 + "";
		startSecond = (Integer.parseInt(startSecond) + Integer
				.parseInt(webSecond)) + "";
		webmillis = currentmillis;

		event.gameLogEvent2(currentmillis, webSecond);

		event.queryCfgAct(gameSDKVersion, imei, imsi, gameSDKSessionId,
				gameContentId, gameChannelId);

		event.post_egsb_verification_getUpdateUrl(gameSDKVersion, imei, imsi,
				gameSDKSessionId, gameCpId, gameContentId, gameChannelId,
				MODEL, packageName);

		// -------------------------------------------------------------------------------------

//		String sms = base.generate_migu_sms(mg20irid, imsi, imei, encodecid,
//				rand16Num, base.getSmsTimeStampByMillis(currentmillis),
//				apkstatus);
		if (sms.equals("")) {
			return resultCode;
		}
		// Thread.sleep(6*1000);
		currentmillis = Game2ExecLinstenerThreadDao.supportAttrInfo.optLong("reReportStrCurrentmillis");//currentmillis + 10000 + base.getRandom(10000);
		String charge_getSession_rsp = "";
		for (int i = 0; i < 3; i++) {
			webSecond = (currentmillis - webmillis) / 1000 + "";
			startSecond = (Integer.parseInt(startSecond) + Integer
					.parseInt(webSecond)) + "";
			webmillis = currentmillis;
			ReportStr = base
					.generate_ReportStr(
							"",
							imei,
							imsi,
							encodecid,
							"",
							base.getSmsTimeStampByMillis(currentmillis),
							apkstatus,
							netcount,
							paycount,
							startcount,
							startSecond,
							webSecond,
							soVersion,
							migusdkversion,
							"",
							"",
							"",
							"",
							"",
							MiguPay_FileSHA1,
							Serial,
							linux_version,
							Hardware,
							local_ip,
							"com.migu.sdk.inter.impl.e$2.run(SMSGetPhoneImpl.java:72)|2",
							isRoot, localsessionid);
			netcount++;
			System.out.println("ReportStr:\t" + ReportStr);
			charge_getSession_rsp = base.post_charge_getSession(headers,
					mg20irid, sms, ReportStr);
			resultCode = base.getContextByTag(charge_getSession_rsp, "ResultCode");
			if (resultCode.equals("0")) {
				break;
			} else {
				if (i == 2) {
					return resultCode;
				}
				currentmillis = currentmillis + 1000 + base.getRandom(2000);
				try {
					Thread.sleep(3 * 1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}

		String[] charge_getSession_rsp_dec = algorithm.DecryptNet1(mg20irid,
				base.getContextByTag(charge_getSession_rsp, "Enc"));
		if (charge_getSession_rsp_dec == null
				|| !charge_getSession_rsp_dec[0].substring(1, 2).equals("0")) {
			return resultCode;
		}
		phoneNumber = charge_getSession_rsp_dec[0].substring(3, 14);

		System.out.println("phoneNumber:\t" + phoneNumber);

		for (int i = 0; i < 3; i++) {
			resultCode=billing(localsessionid, startmillis, headers, BaseClientHeader,
					webmillis, "32", "", "0");
		}
		return resultCode;
	}

	private String billing(String localsessionid, long startmillis,
			Map<String, String> headers, String BaseClientHeader,
			long webmillis, String ChargePolicy, String ChannelFlag,
			String RedUserFlag) {
		String ReportStr;
		event.gameLogEvent4(currentmillis, webSecond, Fee, itemName, ItemId,
				chargePolicy);
		//
		// ����Ʒ�ҳ��
		currentmillis = currentmillis + 20000 + base.getRandom(100000);
		// webSecond = (currentmillis - webmillis) / 1000 + "";
		// startSecond = (Integer.parseInt(startSecond) + Integer
		// .parseInt(webSecond)) + "";
		// webmillis = currentmillis;
		long stayTime = currentmillis;

		currentmillis = currentmillis + 100 + base.getRandom(200);
		webSecond = (currentmillis - webmillis) / 1000 + "";
		startSecond = (Integer.parseInt(startSecond) + Integer
				.parseInt(webSecond)) + "";
		webmillis = currentmillis;
		ReportStr = base.generate_ReportStr(phoneNumber, imei, imsi, encodecid,
				"", base.getSmsTimeStampByMillis(currentmillis), apkstatus,
				netcount, paycount, startcount, startSecond, webSecond,
				soVersion, migusdkversion, "", "", "", "", "",
				MiguPay_FileSHA1, Serial, linux_version, Hardware, local_ip,
				"com.migu.sdk.a.b$5.run(CatchLog.java:638)|2", isRoot,
				localsessionid);
		netcount++;
		System.out.println("ReportStr:\t" + ReportStr);
		String tl_tcttl_recordPolicyLog_req = base
				.generate_tl_tcttl_recordPolicyLog(BaseClientHeader,
						base.getLogTimeStampByMillis(currentmillis),
						phoneNumber, Ctype, "", phoneNumber, cpId, contentId,
						ChannelCode, productId, "", ChargePolicy, ChannelFlag,
						RedUserFlag);
		String tl_tcttl_recordPolicyLog_rsp = base.post_tl_tcttl(headers,
				mg20irid, tl_tcttl_recordPolicyLog_req, ReportStr);
		resultCode=base.getContextByTag(tl_tcttl_recordPolicyLog_rsp, "ResultCode");
		if (!resultCode.equals("0")) {
			return resultCode;
		}

		currentmillis = currentmillis + 500 + base.getRandom(1000);
		webSecond = (currentmillis - webmillis) / 1000 + "";
		startSecond = (Integer.parseInt(startSecond) + Integer
				.parseInt(webSecond)) + "";
		webmillis = currentmillis;
		ReportStr = base.generate_ReportStr(phoneNumber, imei, imsi, encodecid,
				"", base.getSmsTimeStampByMillis(currentmillis), apkstatus,
				netcount, paycount, startcount, startSecond, webSecond,
				soVersion, migusdkversion, "0", "", "", "", "",
				MiguPay_FileSHA1, Serial, linux_version, Hardware, local_ip,
				"com.migu.sdk.c.b$5.run(MiguMainSDK.java:297)|2", isRoot,
				localsessionid);
		netcount++;
		System.out.println("ReportStr:\t" + ReportStr);
		String policySecLv_queryChargePolicyInfoReq = base
				.generate_policySecLv_queryChargePolicyInfoReq(
						BaseClientHeader, phoneNumber,
						base.getLogTimeStampByMillis(currentmillis), Ctype, "",
						"", "", cpId, contentId, ChannelCode, productId);
		String policySecLv_queryChargePolicyInfoReq_rsp = base
				.post_policySecLv_queryChargePolicyInfoReq(headers, mg20irid,
						policySecLv_queryChargePolicyInfoReq, ReportStr);
		resultCode=base.getContextByTag(policySecLv_queryChargePolicyInfoReq_rsp,"ResultCode");
		if (!resultCode.equals("0")) {
			return resultCode;
		}

		String[] policySecLv_queryChargePolicyInfoReq_rsp_dec = algorithm
				.DecryptNet1(mg20irid, base.getContextByTag(
						policySecLv_queryChargePolicyInfoReq_rsp, "Enc"));
		resultCode=base.getContextByTag(policySecLv_queryChargePolicyInfoReq_rsp_dec[1],"ResultCode");
		if (policySecLv_queryChargePolicyInfoReq_rsp_dec == null
				|| !resultCode.equals("0")) {
			return resultCode;
		}

		ChargePolicy = base
				.getContextByTag(
						policySecLv_queryChargePolicyInfoReq_rsp_dec[1],
						"ChargePolicy");
		ChannelFlag = base.getContextByTag(
				policySecLv_queryChargePolicyInfoReq_rsp_dec[1], "ChannelFlag");
		RedUserFlag = base.getContextByTag(
				policySecLv_queryChargePolicyInfoReq_rsp_dec[1], "RedUserFlag");
		ChargePolicy = "1";
		// ����Ʒ�
		currentmillis = currentmillis + 2000 + base.getRandom(10000);
		webSecond = (currentmillis - webmillis) / 1000 + "";
		startSecond = (Integer.parseInt(startSecond) + Integer
				.parseInt(webSecond)) + "";
		webmillis = currentmillis;

		event.gameLogEvent5(currentmillis, webSecond, Fee, itemName, ItemId,
				chargePolicy, screen);
		event.gameLogEvent6(currentmillis, webSecond, Fee, itemName, ItemId,
				chargePolicy);

		ReportStr = base
				.generate_ReportStr(
						phoneNumber,
						imei,
						imsi,
						encodecid,
						"",
						base.getSmsTimeStampByMillis(currentmillis),
						apkstatus,
						netcount,
						paycount,
						startcount,
						startSecond,
						webSecond,
						soVersion,
						migusdkversion,
						"",
						"",
						"",
						"",
						"",
						MiguPay_FileSHA1,
						Serial,
						linux_version,
						Hardware,
						local_ip,
						"cn.cmgame2_0.billing_model.view.controller.billing.ABillingViewController$5.onClick(ABillingViewController.java:376)|2",
						isRoot, localsessionid);
		netcount++;
		System.out.println("ReportStr:\t" + ReportStr);
		String OrderId = "030" + System.currentTimeMillis() + "FLo2wL";
		cpparam = Common.getSession(16);
		// cpparam = "qwert";
		String charge_sessionReq_req = base.generate_charge_sessionReq(
				ChargePolicy, phoneNumber,
				base.getLogTimeStampByMillis(currentmillis), Ctype, OrderId,
				Fee, ItemId, cpId, contentId, ChannelCode, productId, cpparam);
		String charge_sessionReq_rsp = base.post_charge_sessionReq(headers,
				mg20irid, charge_sessionReq_req, ReportStr);
		resultCode=base.getContextByTag(charge_sessionReq_rsp, "ResultCode");
		if (!resultCode.equals(
				"0")) {
			return resultCode;
		}
		String ihJVd = base.getContextByTag(charge_sessionReq_rsp, "ihJVd");
		String Lwkn = base.getContextByTag(charge_sessionReq_rsp, "Lwkn");
		String[] charge_sessionReq_rsp_dec = algorithm.DecryptNet1(mg20irid,
				base.getContextByTag(charge_sessionReq_rsp, "Enc"));
		if (charge_sessionReq_rsp_dec == null) {
			return resultCode;
		}
		System.out.println("charge_sessionReq_rsp_dec:\t"
				+ charge_sessionReq_rsp_dec[0]);
		String websessionid = charge_sessionReq_rsp_dec[0].substring(1, 9);
		System.out.println("websessionid:\t" + websessionid);
		currentmillis = currentmillis + 500 + base.getRandom(1000);
		webSecond = (currentmillis - webmillis) / 1000 + "";
		startSecond = (Integer.parseInt(startSecond) + Integer
				.parseInt(webSecond)) + "";
		webmillis = currentmillis;
		paycount++;
		if (paycount == 1) {
			apkstatus = chargeApkstatus();
		}
		String ChargePolicyStatus = "status=1,get=" + "2" + ",use=" + "1";
		String payInfo = cpId + "," + "" + "," + productId + "," + contentId
				+ ";" + cpId + "," + ChannelCode + "," + productId + ","
				+ contentId;
		ReportStr = base.generate_ReportStr(phoneNumber, imei, imsi, encodecid,
				websessionid, base.getSmsTimeStampByMillis(currentmillis),
				apkstatus, netcount, paycount, startcount, startSecond,
				webSecond, soVersion, migusdkversion, "0", ChargePolicyStatus,
				payInfo, "", "", MiguPay_FileSHA1, Serial, linux_version,
				Hardware, local_ip,
				"com.openx.greq.c.c$3.run(Client.java:127)|2", isRoot,
				localsessionid);
		netcount++;
		System.out.println("ReportStr:\t" + ReportStr);
		headers.put("kyMy", ihJVd);
		headers.put("ssov", miguEDVersion);
		String charge_payReq_req = base.generate_charge_payReq(
				BaseClientHeader, ChargePolicy, phoneNumber, ChannelFlag,
				base.getLogTimeStampByMillis(currentmillis), Ctype, OrderId,
				Fee, ItemId, cpId, contentId, ChannelCode, productId, cpparam,
				gameContentId, gameChannelId);
		String edstr = base.generate_charge_payReq_EDstr(
				miguEDVersion.substring(miguEDVersion.indexOf(".") + 1),
				base.getSmsTimeStampByMillis(currentmillis
						- (8 * 60 * 60 * 1000)), imei, paycount);
		String charge_payReq_rsp = base.post_charge_payReq(headers, mg20irid,
				charge_payReq_req, ReportStr, ihJVd, Lwkn, edstr);

		event.gameLogEvent7(currentmillis, webSecond, gameName, Fee, itemName,
				ItemId, chargePolicy, screen, RELEASE, packageName,
				versionName, versionCode, currentmillis - stayTime);
		resultCode=base.getContextByTag(charge_payReq_rsp, "ResultCode");
		if (!resultCode.equals("0")) {
			return resultCode;
		}
		String[] charge_payReq_rsp_dec = algorithm.DecryptNet1(mg20irid,
				base.getContextByTag(charge_payReq_rsp, "Enc"));
		resultCode=base.getContextByTag(charge_payReq_rsp_dec[1], "ResultCode");
		if (charge_payReq_rsp_dec == null
				|| !resultCode.equals("0")) {
			return resultCode;
		}
		headers.remove("kyMy");
		headers.remove("ssov");
		System.out.println(charge_payReq_rsp_dec[1]);
		return resultCode;
	}

	private String chargeApkstatus() {
		int states = Integer.parseInt(apkstatus) + 8;
		if (states < 10) {
			return "0" + states;
		}
		return states + "";
	}

}
